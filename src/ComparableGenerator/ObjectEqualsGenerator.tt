<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
base.TransformText();
#>
<#+
protected override void WriteCode()
{
    var context = this.Context;
    var type = context.Type;

    string typeName = type.Name;
    string typeKind = GetTypeKind(type);

    var sourceType = context.SourceType;
    var options = context.Options;

    bool delegateToEquatable =
        sourceType.IsEquatable || options.GenerateEquatable;

    bool delegateToGenericComparable =
        sourceType.IsGenericComparable || options.GenerateGenericComparable;

    bool delegateToNonGenericComparable =
        sourceType.IsNonGenericComparable || options.GenerateNonGenericComparable;
#>
partial <#= typeKind #> <#= typeName #>
{
    public override bool Equals(
        <#= context.NullableObjectTypeName #> other)
    {
        if (other is not <#= typeName #> other2)
        {
            return false;
        }

<#+
    if (delegateToEquatable)
    {
#>
        return ((IEquatable<<#= typeName #>>)this).Equals(other2);
<#+

    }
    else if (delegateToGenericComparable)
    {
#>
        return ((IComparable<<#= typeName #>>)this).CompareTo(other2) == 0;
<#+
    }
    else if (delegateToNonGenericComparable)
    {
#>
        return ((IComparable)this).CompareTo(other2) == 0;
<#+
    }
    else
    {
#>
        return __EqualsCore(this, other2);
<#+
    }
#>
    }
}
<#+
}
#>

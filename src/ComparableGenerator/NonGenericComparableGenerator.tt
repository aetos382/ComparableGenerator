<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteCode()
    {
        var context = this.Context;
        var type = context.Type;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var sourceType = context.SourceType;

        string virtualModifier =
            !sourceType.IsValueType && context.Options.GenerateMethodsAsVirtual ?
                " virtual" : "";

#>
partial <#= typeKind #> <#= typeName #> :
    IComparable
{
    public<#= virtualModifier #> int CompareTo(
        <#= context.NullableObjectTypeName #> other)
    {
        if (other is null)
        {
            return int.MaxValue;
        }

        if (other is not <#= typeName #> other2)
        {
            throw new ArgumentException();
        }

<#+
        if (context.SourceType.IsGenericComparable ||
            context.Options.GenerateGenericComparable)
        {
#>
        return ((IComparable<<#= typeName #>>)this).CompareTo(other2);
<#+
        }
        else
        {
#>
        return __CompareCore(this, other2);
<#+
        }
#>
    }
}
<#+
    }
#>

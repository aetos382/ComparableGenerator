<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
base.TransformText();
#>
<#+
protected override void WriteCode()
{
    var context = this.Context;
    var type = context.Type;

    string typeName = type.Name;
    string typeKind = GetTypeKind(type);
#>
partial <#= typeKind #> <#= typeName #> :
    IComparable
{
    public int CompareTo(
        <#= context.NullableObjectTypeName #> other)
    {
        if (other is null)
        {
            return int.MaxValue;
        }

        if (other is not <#= type.Name #> other2)
        {
            throw new ArgumentException();
        }

<#+
    if (context.SourceType.IsGenericComparable ||
        context.Options.GenerateGenericComparable)
    {
#>
        return this.CompareTo(other2);
<#+
    }
    else
    {
#>
        return Compare(this, other2);
<#+
    }
#>
    }
}
<#+
}
#>

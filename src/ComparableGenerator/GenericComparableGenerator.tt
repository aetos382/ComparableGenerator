<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
base.TransformText();
#>
<#+
protected override void WriteCode()
{
    var context = this.Context;
    var type = context.Type;

    string typeName = type.Name;
    string typeKind = GetTypeKind(type);
#>
partial <#= typeKind #> <#= typeName #> :
    IComparable<<#= typeName #>>
{
    public int CompareTo(
        <#= context.NullableTypeName #> other)
    {
<#+
    if (context.SourceType.IsNonGenericComparable)
    {
#>
        return this.CompareTo(other);
<#+
    }
    else
    {
        if (!type.IsValueType)
        {
#>
        if (other is null)
        {
            return int.MaxValue;
        }
<#+
        }
#>
        return Compare(this, other);
<#+
    }
#>
    }
}
<#+
}
#>

<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
base.TransformText();
#>
<#+
protected override void WriteCode()
{
    var context = this.Context;
    var type = context.Type;

    string typeName = type.Name;
    string typeKind = GetTypeKind(type);

    var sourceType = context.SourceType;
    var options = context.Options;
#>
partial <#= typeKind #> <#= typeName #> :
    IEquatable<<#= typeName #>>
{
    public bool Equals(
        <#= context.NullableTypeName #> other)
    {
<#+
    if (sourceType.OverridesObjectEquals)
    {
#>
        return this.Equals(other);
<#+
    }
    else if (sourceType.IsGenericComparable || options.GenerateGenericComparable)
    {
#>
        return this.CompareTo(other) == 0;
<#+
    }
    else
    {
#>
        return Compare(this, other) == 0;
<#+
    }
#>
    }
}
<#+
}
#>
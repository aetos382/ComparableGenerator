<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteUsings()
    {
#>
using System.Collections.Generic;
using System.ComponentModel;
<#+
    }

    protected override void WriteCode()
    {
        var context = this.Context;
        var type = context.Type;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var sourceType = context.SourceType;
        var options = context.Options;

        string nullableTypeName = context.NullableTypeName;

        var isValueType = sourceType.IsValueType;
        string dotValue = isValueType ? ".Value" : "";
#>
partial <#= typeKind #> <#= typeName #>
{
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static bool __EqualsCore(
        <#= nullableTypeName #> left,
        <#= nullableTypeName #> right)
    {
<#+
        if (!isValueType)
        {
#>
        if (object.ReferenceEquals(left, right))
        {
            return true;
        }
<#+
        }
#>

<#+
        if (context.IsNullable)
        {
#>
        if (left is null || right is null)
        {
            return false;
        }
<#+
            }
#>

        bool result;
<#+
            foreach (var member in context.Members)
            {
                string memberName = member.Name;
#>

        result = EqualityComparer<<#= member.TypeName #>>.Default.Equals(left<#= dotValue #>.<#= memberName #>, right<#= dotValue #>.<#= memberName #>);
        if (!result)
        {
            return result;
        }
<#+
            }

#>

        return true;
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static int __CompareCore(
        <#= nullableTypeName #> left,
        <#= nullableTypeName #> right)
    {
<#+
            if (!isValueType)
            {
#>
        if (object.ReferenceEquals(left, right))
        {
            return 0;
        }
<#+
            }

            if (context.IsNullable)
            {
#>
        if (left is null)
        {
            return int.MinValue;
        }

        if (right is null)
        {
            return int.MaxValue;
        }
<#+
            }
#>

        int result;
<#+
            foreach (var member in context.Members)
            {
                string memberName = member.Name;
#>

        result = Comparer<<#= member.TypeName #>>.Default.Compare(left<#= dotValue #>.<#= memberName #>, right<#= dotValue #>.<#= memberName #>);
        if (result != 0)
        {
            return result;
        }
<#+
            }

#>

        return 0;
    }

<#+
        if (options.GenerateEqualityContract &&
            !sourceType.HasEqualityContract &&
            !isValueType)
        {
#>
    protected virtual Type EqualityContract
    {
        get
        {
            return typeof(<#= typeName #>);
        }
    }
<#+
        }
#>
}
<#+
    }
#>

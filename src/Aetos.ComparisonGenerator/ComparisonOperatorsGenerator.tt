<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteCode()
    {
        var sourceTypeInfo = this.SourceTypeInfo;
        var type = sourceTypeInfo.TypeSymbol;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var isValueType = sourceTypeInfo.IsValueType;
        var nullableAnnotationEnabled = sourceTypeInfo.NullableAnnotationsEnabled;

        var parameterTypeName = (isValueType, nullableAnnotationEnabled) switch {

            (true, _) => $"{typeName}?",
            (false, false) => typeName,
            (false, true) => $"{typeName}?"

        };
#>
partial <#= typeKind #> <#= typeName #>
{
    public static bool operator <(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
        return __CompareCore(left, right) < 0;
    }

    public static bool operator >(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
        return __CompareCore(left, right) > 0;
    }

    public static bool operator <=(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
        return !(left > right);
    }
    
    public static bool operator >=(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
        return !(left < right);
    }
}
<#+
    }
#>

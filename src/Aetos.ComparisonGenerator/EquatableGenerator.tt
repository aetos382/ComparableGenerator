<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteCode()
    {
        var sourceTypeInfo = this.SourceTypeInfo;
        var type = sourceTypeInfo.TypeSymbol;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var options = sourceTypeInfo.GenerateOptions;

        var isValueType = sourceTypeInfo.IsValueType;
        var nullableAnnotationEnabled = sourceTypeInfo.NullableAnnotationsEnabled;

        var parameterTypeName = (isValueType, nullableAnnotationEnabled) switch {

            (true, _) => typeName,
            (false, false) => typeName,
            (false, true) => $"{typeName}?"

        };

        string nullableObjectTypeName = nullableAnnotationEnabled
            ? "object?"
            : "object";

        string virtualModifier =
            !sourceTypeInfo.IsValueType && options.GenerateMethodsAsVirtual ?
                " virtual" : "";
#>
partial <#= typeKind #> <#= typeName #> :
    IEquatable<<#= typeName #>>
{
    public<#= virtualModifier #> bool Equals(
        <#= parameterTypeName #> other)
    {
<#+
        if (sourceTypeInfo.OverridesObjectEquals)
        {
#>
        return this.Equals((<#= nullableObjectTypeName #>)other);
<#+
        }
        else if (sourceTypeInfo.IsGenericComparable)
        {
#>
        return ((IComparable<<#= typeName #>>)this).CompareTo(other) == 0;
<#+
        }
        else if (sourceTypeInfo.IsNonGenericComparable)
        {
#>
        return ((IComparable)this).CompareTo(other) == 0;
<#+
        }
        else
        {
#>
        return __EqualsCore(this, other);
<#+
        }
#>
    }
}
<#+
    }
#>

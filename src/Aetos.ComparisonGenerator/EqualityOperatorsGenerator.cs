// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Aetos.ComparisonGenerator
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class EqualityOperatorsGenerator : GeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {

    base.TransformText();

            return this.GenerationEnvironment.ToString();
        }

    protected override void WriteCode()
    {
        var sourceTypeInfo = this.SourceTypeInfo;
        var type = sourceTypeInfo.TypeSymbol;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var isValueType = sourceTypeInfo.IsValueType;
        var nullableAnnotationEnabled = sourceTypeInfo.NullableAnnotationsEnabled;

        var parameterTypeName = (isValueType, nullableAnnotationEnabled) switch {

            (true, _) => $"{typeName}?",
            (false, false) => typeName,
            (false, true) => $"{typeName}?"

        };

this.Write("partial ");

this.Write(this.ToStringHelper.ToStringWithCulture(typeKind));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

this.Write("\r\n{\r\n    public static bool operator ==(\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(parameterTypeName));

this.Write(" left,\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(parameterTypeName));

this.Write(" right)\r\n    {\r\n        return __EqualsCore(left, right);\r\n    }\r\n\r\n    public st" +
        "atic bool operator !=(\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(parameterTypeName));

this.Write(" left,\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(parameterTypeName));

this.Write(" right)\r\n    {\r\n        return !(left == right);\r\n    }\r\n}\r\n");


    }

    }
}

<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteCode()
    {
        var sourceTypeInfo = this.SourceTypeInfo;
        var type = sourceTypeInfo.TypeSymbol;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var options = sourceTypeInfo.GenerateOptions;

        string virtualModifier =
            !sourceTypeInfo.IsValueType && options.GenerateMethodsAsVirtual ?
                " virtual" : "";

        string nullableObjectTypeName = sourceTypeInfo.NullableAnnotationsEnabled
            ? "object?"
            : "object";


#>
partial <#= typeKind #> <#= typeName #> :
    IComparable
{
    public<#= virtualModifier #> int CompareTo(
        <#= nullableObjectTypeName #> other)
    {
        if (other is null)
        {
            return int.MaxValue;
        }

        if (other is not <#= typeName #> other2)
        {
            throw new ArgumentException();
        }

<#+
        if (sourceTypeInfo.IsGenericComparable ||
            options.GenerateGenericComparable)
        {
#>
        return ((IComparable<<#= typeName #>>)this).CompareTo(other2);
<#+
        }
        else
        {
#>
        return __CompareCore(this, other2);
<#+
        }
#>
    }
}
<#+
    }
#>

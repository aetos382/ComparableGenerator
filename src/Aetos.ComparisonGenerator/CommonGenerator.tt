<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteUsings()
    {
#>
using System.Collections.Generic;
using System.ComponentModel;
<#+
    }

    protected override void WriteCode()
    {
        var sourceTypeInfo = this.SourceTypeInfo;
        var type = sourceTypeInfo.TypeSymbol;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var isValueType = sourceTypeInfo.IsValueType;
        var nullableAnnotationEnabled = sourceTypeInfo.NullableAnnotationsEnabled;

        var parameterTypeName = (isValueType, nullableAnnotationEnabled) switch {

            (true, _) => $"{typeName}?",
            (false, false) => typeName,
            (false, true) => $"{typeName}?"

        };

        string dotValue = isValueType ? ".Value" : "";
#>
partial <#= typeKind #> <#= typeName #>
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    private static bool __EqualsCore(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
<#+
        if (sourceTypeInfo.HasComparableAttribute)
        {
#>
        return __CompareCore(left, right) == 0;
<#+
        }
        else
        {
            if (!isValueType)
            {
#>
        if (object.ReferenceEquals(left, right))
        {
            return true;
        }
<#+
            }
#>
        
        if (left is null || right is null)
        {
            return false;
        }

        bool result;
<#+
            foreach (var member in sourceTypeInfo.Members)
            {
                string memberName = member.Name;
#>

        result = EqualityComparer<<#= member.FullTypeNameWithGlobalPrefix #>>.Default.Equals(left<#= dotValue #>.<#= memberName #>, right<#= dotValue #>.<#= memberName #>);
        if (!result)
        {
            return result;
        }
<#+
            }

#>

        return true;
<#+
        }
#>
    }

<#+
        if (sourceTypeInfo.HasComparableAttribute)
        {
#>
    [EditorBrowsable(EditorBrowsableState.Never)]
    private static int __CompareCore(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
<#+
            if (!isValueType)
            {
#>
        if (object.ReferenceEquals(left, right))
        {
            return 0;
        }

<#+
            }
#>
        if (left is null)
        {
            return int.MinValue;
        }

        if (right is null)
        {
            return int.MaxValue;
        }

        int result;
<#+
            foreach (var member in sourceTypeInfo.Members)
            {
                string memberName = member.Name;
#>

        result = Comparer<<#= member.FullTypeNameWithGlobalPrefix #>>.Default.Compare(left<#= dotValue #>.<#= memberName #>, right<#= dotValue #>.<#= memberName #>);
        if (result != 0)
        {
            return result;
        }
<#+
            }

#>

        return 0;
    }
<#+
        }
#>
}
<#+
    }
#>

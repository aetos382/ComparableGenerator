<#@ template language="C#" linePragmas="false" visibility="internal" inherits="GeneratorBase" #>
<#
    base.TransformText();
#>
<#+
    protected override void WriteUsings()
    {
#>
using System.Collections.Generic;
using System.ComponentModel;
<#+
    }

    protected override void WriteCode()
    {
        var sourceTypeInfo = this.SourceTypeInfo;
        var type = sourceTypeInfo.TypeSymbol;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var options = sourceTypeInfo.GenerateOptions;

        var isValueType = sourceTypeInfo.IsValueType;
        var nullableAnnotationEnabled = sourceTypeInfo.NullableAnnotationsEnabled;

        var parameterTypeName = (isValueType, nullableAnnotationEnabled) switch {

            (true, _) => typeName,
            (false, false) => typeName,
            (false, true) => $"{typeName}?"

        };

        bool parameterIsNullable =
            !sourceTypeInfo.IsValueType ||
            sourceTypeInfo.IsNullableValueType;

        string dotValue = isValueType ? ".Value" : "";
#>
partial <#= typeKind #> <#= typeName #>
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    private static bool __EqualsCore(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
<#+
        if (!isValueType)
        {
#>
        if (object.ReferenceEquals(left, right))
        {
            return true;
        }
<#+
        }
#>
        
<#+
        if (parameterIsNullable)
        {
#>
        if (left is null || right is null)
        {
            return false;
        }
<#+
        }
#>

        bool result;
<#+
        foreach (var member in sourceTypeInfo.Members)
        {
            string memberName = member.Name;
#>

        result = EqualityComparer<<#= member.TypeName #>>.Default.Equals(left<#= dotValue #>.<#= memberName #>, right<#= dotValue #>.<#= memberName #>);
        if (!result)
        {
            return result;
        }
<#+
        }

#>

        return true;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    private static int __CompareCore(
        <#= parameterTypeName #> left,
        <#= parameterTypeName #> right)
    {
<#+
        if (!isValueType)
        {
#>
        if (object.ReferenceEquals(left, right))
        {
            return 0;
        }
<#+
        }

        if (parameterIsNullable)
        {
#>
        if (left is null)
        {
            return int.MinValue;
        }

        if (right is null)
        {
            return int.MaxValue;
        }
<#+
        }
#>

        int result;
<#+
        foreach (var member in sourceTypeInfo.Members)
        {
            string memberName = member.Name;
#>

        result = Comparer<<#= member.TypeName #>>.Default.Compare(left<#= dotValue #>.<#= memberName #>, right<#= dotValue #>.<#= memberName #>);
        if (result != 0)
        {
            return result;
        }
<#+
        }

#>

        return 0;
    }

<#+
        if (options.GenerateEqualityContract &&
            !sourceTypeInfo.HasEqualityContract &&
            !isValueType)
        {
#>
    protected virtual Type EqualityContract
    {
        get
        {
            return typeof(<#= typeName #>);
        }
    }
<#+
        }
#>
}
<#+
    }
#>

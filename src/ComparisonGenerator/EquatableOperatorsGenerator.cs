// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ComparisonGenerator
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class EquatableOperatorsGenerator : GeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {

    base.TransformText();

            return this.GenerationEnvironment.ToString();
        }

    protected override void WriteCode()
    {
        var context = this.Context;
        var type = context.Type;

        string typeName = type.Name;
        string typeKind = GetTypeKind(type);

        var sourceType = context.SourceType;
        var options = context.Options;

        string nullableTypeName = context.NullableTypeName;

        bool hasEquals =
            sourceType.OverridesObjectEquals ||
            options.GenerateObjectEquals ||
            sourceType.IsEquatable ||
            options.GenerateEquatable;

        bool hasCompareTo =
            sourceType.IsGenericComparable ||
            options.GenerateGenericComparable ||
            sourceType.IsNonGenericComparable ||
            options.GenerateNonGenericComparable;

        string leftVarName = sourceType.IsValueType ? "leftValue" : "left";
        string rightVarName = sourceType.IsValueType ? "rightValue" : "right";

        var isValueType = sourceType.IsValueType;

this.Write("partial ");

this.Write(this.ToStringHelper.ToStringWithCulture(typeKind));

this.Write(" ");

this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

this.Write("\r\n{\r\n    public static bool operator ==(\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(nullableTypeName));

this.Write(" left,\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(nullableTypeName));

this.Write(" right)\r\n    {\r\n");


        if (!isValueType)
        {

this.Write("        if (object.ReferenceEquals(left, right))\r\n        {\r\n            return t" +
        "rue;\r\n        }\r\n");


        }

this.Write("        if (left is null || right is null)\r\n        {\r\n            return false;\r" +
        "\n        }\r\n\r\n");


        if (isValueType)
        {

this.Write("        var leftValue = left.Value;\r\n        var rightValue = right.Value;\r\n");


        }

        if (sourceType.DefinedNonNullableEqualityOperators)
        {

this.Write("        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(leftVarName));

this.Write(" == ");

this.Write(this.ToStringHelper.ToStringWithCulture(rightVarName));

this.Write(";\r\n");


        }
        else if (hasEquals)
        {

this.Write("        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(leftVarName));

this.Write(".Equals(");

this.Write(this.ToStringHelper.ToStringWithCulture(rightVarName));

this.Write(");     \r\n");


        }
        else if (hasCompareTo)
        {

this.Write("        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(leftVarName));

this.Write(".CompareTo(");

this.Write(this.ToStringHelper.ToStringWithCulture(rightVarName));

this.Write(") == 0;\r\n");


        }
        else
        {

this.Write("        return __EqualsCore(");

this.Write(this.ToStringHelper.ToStringWithCulture(leftVarName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(rightVarName));

this.Write(");\r\n");


        }

this.Write("    }\r\n\r\n    public static bool operator !=(\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(nullableTypeName));

this.Write(" left,\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(nullableTypeName));

this.Write(" right)\r\n    {\r\n        return !(left == right);\r\n    }\r\n}\r\n");


    }

    }
}
